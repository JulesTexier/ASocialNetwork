{"ast":null,"code":"var _jsxFileName = \"/Users/julestexier/Google_Drive/PRO/THP_NEXT/Semaine 7 - React avance\\u0301 (suite)/Jour 1 - Redux/Redux - plusieurs reducer/starterReact/src/index.jsx\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, combineReducers } from 'redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  const BUY_PASTAS = 'BUY_PASTAS';\n  const EAT_PASTAS = 'EAT_PASTAS';\n  const BUY_RICE = 'BUY_RICE';\n  const EAT_RICE = 'EAT_RICE';\n  const initialStatePastas = {\n    pastas: 4\n  };\n  const initialStateRice = {\n    pastas: 4\n  }; //1. Les actions sont des objets simples contenant un type, étant une string, \n  //définissant ce que l'action va faire. \n\n  const buyPastas = (weight, index) => {\n    return {\n      type: 'BUY_PASTAS',\n      weight,\n      index\n    };\n  };\n\n  const eatPastas = (weight, index) => {\n    return {\n      type: 'EAT_PASTAS',\n      weight,\n      index\n    };\n  };\n\n  const buyRice = (weight, index) => {\n    return {\n      type: 'BUY_RICE',\n      weight,\n      index\n    };\n  };\n\n  const eatRice = (weight, index) => {\n    return {\n      type: 'EAT_RICE',\n      weight,\n      index\n    };\n  }; //2. Le reducer est une fonction pure qui récupère le state précédent et une action, et renvoi le state suivant.\n\n\n  const pastasReducer = (state = initialState, action) => {\n    switch (action.type) {\n      case 'EAT_PASTAS':\n        return { ...state,\n          pastas: state.pastas + action.weight\n        };\n\n      case 'BUY_PASTAS':\n        return { ...state,\n          pastas: state.pastas + action.weight\n        };\n\n      default:\n        return state;\n    }\n\n    return state;\n  };\n\n  const riceReducer = (state = initialState, action) => {\n    switch (action.type) {\n      case 'EAT_RICE':\n        return { ...state,\n          rice: state.rice + action.weight\n        };\n\n      case 'BUY_RICE':\n        return { ...state,\n          rice: state.rice + action.weight\n        };\n\n      default:\n        return state;\n    }\n\n    return state;\n  }; // counter is the name of our future reducer function\n\n\n  const rootReducer = combineReducers({\n    pastas: pastasReducer,\n    rice: riceReducer\n  });\n  store.subscribe(() => console.log(store.getState()));\n  let store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()); // Pour effectuer une action, on utilise store.dispatch(theActionOrActionCreator).\n\n  store.dispatch(eatPastas(3));\n  store.dispatch(buyPastas(2));\n  store.dispatch(buyRice(2));\n  store.dispatch(buyPastas(2));\n  store.dispatch(buyRice(1));\n  store.dispatch(eatRice(2));\n  store.dispatch(eatPastas(1));\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"C'est la vie !\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 11\n  }, this);\n};\n\n_c = App;\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 118,\n  columnNumber: 17\n}, this), document.querySelector(\"#root\"));\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/julestexier/Google_Drive/PRO/THP_NEXT/Semaine 7 - React avancé (suite)/Jour 1 - Redux/Redux - plusieurs reducer/starterReact/src/index.jsx"],"names":["React","ReactDOM","createStore","combineReducers","App","BUY_PASTAS","EAT_PASTAS","BUY_RICE","EAT_RICE","initialStatePastas","pastas","initialStateRice","buyPastas","weight","index","type","eatPastas","buyRice","eatRice","pastasReducer","state","initialState","action","riceReducer","rice","rootReducer","store","subscribe","console","log","getState","window","__REDUX_DEVTOOLS_EXTENSION__","dispatch","render","document","querySelector"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, combineReducers } from 'redux';\n\nconst App = () => {\n  \n  \nconst BUY_PASTAS = 'BUY_PASTAS';\nconst EAT_PASTAS = 'EAT_PASTAS';\nconst BUY_RICE = 'BUY_RICE';\nconst EAT_RICE = 'EAT_RICE';\n\nconst initialStatePastas = {\n  pastas: 4\n};\n\nconst initialStateRice = {\n  pastas: 4\n};\n\n//1. Les actions sont des objets simples contenant un type, étant une string, \n  //définissant ce que l'action va faire. \n\n  const buyPastas = (weight, index) => {\n    return {\n      type: 'BUY_PASTAS',\n      weight,\n      index\n    }\n  }\n  const eatPastas = (weight, index) => {\n    return {\n      type: 'EAT_PASTAS',\n      weight,\n      index\n    }\n  }\n\n  const buyRice = (weight, index) => {\n    return {\n      type: 'BUY_RICE',\n      weight,\n      index\n    }\n  }\n  const eatRice = (weight, index) => {\n    return {\n      type: 'EAT_RICE',\n      weight,\n      index\n    }\n  }\n \n //2. Le reducer est une fonction pure qui récupère le state précédent et une action, et renvoi le state suivant.\n  const pastasReducer = (state = initialState, action) => {\n    switch(action.type) {\n      case 'EAT_PASTAS':\n        return {\n          ...state,\n          pastas: state.pastas + action.weight\n        }\n        case 'BUY_PASTAS':\n          return {\n            ...state,\n            pastas: state.pastas + action.weight\n          }\n          default:\n            return state;\n          }\n          return state;\n        }   \n\n  const riceReducer = (state = initialState, action) => {\n    switch(action.type) {\n      case 'EAT_RICE':\n        return {\n          ...state,\n          rice: state.rice + action.weight\n        }\n        case 'BUY_RICE':\n          return {\n            ...state,\n            rice: state.rice + action.weight\n          }\n          default:\n            return state;\n          }\n          return state;\n        }   \n        \n// counter is the name of our future reducer function\n        const rootReducer = combineReducers({\n          pastas: pastasReducer,\n          rice: riceReducer\n})\n        store.subscribe(() => console.log(store.getState()));\n\n\n        let store = createStore(\n          rootReducer,\n          window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n        )\n\n// Pour effectuer une action, on utilise store.dispatch(theActionOrActionCreator).\n      store.dispatch(eatPastas(3));\n      store.dispatch(buyPastas(2));\n      store.dispatch(buyRice(2));\n      store.dispatch(buyPastas(2));\n      store.dispatch(buyRice(1));\n      store.dispatch(eatRice(2));\n      store.dispatch(eatPastas(1));\n\n        return (\n          <p>C'est la vie !</p>\n        )\n      }\n      \nReactDOM.render(<App />, document.querySelector(\"#root\"));"]},"metadata":{},"sourceType":"module"}