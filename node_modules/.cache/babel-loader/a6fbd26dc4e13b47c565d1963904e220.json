{"ast":null,"code":"var _jsxFileName = \"/Users/julestexier/Google_Drive/PRO/THP_NEXT/Semaine 7 - React avance\\u0301 (suite)/Jour 1 - Redux/Redux - plusieurs reducer/starterReact/src/index.jsx\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  const BUY_PASTAS = 'BUY_PASTAS';\n  const EAT_PASTAS = 'EAT_PASTAS';\n  const initialState = {\n    pastas: 4\n  }; //1. Les actions sont des objets simples contenant un type, étant une string, \n  //définissant ce que l'action va faire. \n\n  const buyRice = (weight, index) => {\n    return {\n      type: 'BUY_PASTAS',\n      weight,\n      index\n    };\n  };\n\n  const eatPastas = (weight, index) => {\n    return {\n      type: 'EAT_PASTAS',\n      weight,\n      index\n    };\n  }; //2. Le reducer est une fonction pure qui récupère le state précédent et une action, et renvoi le state suivant.\n\n\n  const pastaReducer = (state = initialState, action) => {\n    switch (action.type) {\n      case 'EAT_PASTAS':\n        return { ...state,\n          pastas: state.pastas + action.weight\n        };\n\n      case 'BUY_PASTAS':\n        return { ...state,\n          pastas: state.pastas + action.weight\n        };\n\n      default:\n        return state;\n    }\n\n    return state;\n  }; // counter is the name of our future reducer function\n\n\n  let store = createStore(pastaReducer);\n  store.subscribe(() => console.log(store.getState())); // Pour effectuer une action, on utilise store.dispatch(theActionOrActionCreator).\n\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"C'est la vie !\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 11\n  }, this);\n};\n\n_c = App;\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 64,\n  columnNumber: 17\n}, this), document.querySelector(\"#root\"));\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/julestexier/Google_Drive/PRO/THP_NEXT/Semaine 7 - React avancé (suite)/Jour 1 - Redux/Redux - plusieurs reducer/starterReact/src/index.jsx"],"names":["React","ReactDOM","createStore","App","BUY_PASTAS","EAT_PASTAS","initialState","pastas","buyRice","weight","index","type","eatPastas","pastaReducer","state","action","store","subscribe","console","log","getState","render","document","querySelector"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,WAAT,QAA4B,OAA5B;;;AAGA,MAAMC,GAAG,GAAG,MAAM;AAGhB,QAAMC,UAAU,GAAG,YAAnB;AACA,QAAMC,UAAU,GAAG,YAAnB;AAEF,QAAMC,YAAY,GAAG;AACnBC,IAAAA,MAAM,EAAE;AADW,GAArB,CANkB,CAUlB;AACE;;AAEA,QAAMC,OAAO,GAAG,CAACC,MAAD,EAASC,KAAT,KAAmB;AACjC,WAAO;AACLC,MAAAA,IAAI,EAAE,YADD;AAELF,MAAAA,MAFK;AAGLC,MAAAA;AAHK,KAAP;AAKD,GAND;;AAOA,QAAME,SAAS,GAAG,CAACH,MAAD,EAASC,KAAT,KAAmB;AACnC,WAAO;AACLC,MAAAA,IAAI,EAAE,YADD;AAELF,MAAAA,MAFK;AAGLC,MAAAA;AAHK,KAAP;AAKD,GAND,CApBgB,CA4BjB;;;AACC,QAAMG,YAAY,GAAG,CAACC,KAAK,GAAGR,YAAT,EAAuBS,MAAvB,KAAkC;AACrD,YAAOA,MAAM,CAACJ,IAAd;AACE,WAAK,YAAL;AACE,eAAO,EACL,GAAGG,KADE;AAELP,UAAAA,MAAM,EAAEO,KAAK,CAACP,MAAN,GAAeQ,MAAM,CAACN;AAFzB,SAAP;;AAIA,WAAK,YAAL;AACE,eAAO,EACL,GAAGK,KADE;AAELP,UAAAA,MAAM,EAAEO,KAAK,CAACP,MAAN,GAAeQ,MAAM,CAACN;AAFzB,SAAP;;AAIA;AACE,eAAOK,KAAP;AAZR;;AAcM,WAAOA,KAAP;AACD,GAhBP,CA7BgB,CA+ClB;;;AACQ,MAAIE,KAAK,GAAGd,WAAW,CAACW,YAAD,CAAvB;AACAG,EAAAA,KAAK,CAACC,SAAN,CAAgB,MAAMC,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACI,QAAN,EAAZ,CAAtB,EAjDU,CAmDlB;;AAEQ,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAGD,CAxDP;;KAAMjB,G;AA0DNF,QAAQ,CAACoB,MAAT,eAAgB,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,QAAhB,EAAyBC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAzB","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\n\n\nconst App = () => {\n  \n  \n  const BUY_PASTAS = 'BUY_PASTAS';\n  const EAT_PASTAS = 'EAT_PASTAS';\n\nconst initialState = {\n  pastas: 4\n};\n\n//1. Les actions sont des objets simples contenant un type, étant une string, \n  //définissant ce que l'action va faire. \n\n  const buyRice = (weight, index) => {\n    return {\n      type: 'BUY_PASTAS',\n      weight,\n      index\n    }\n  }\n  const eatPastas = (weight, index) => {\n    return {\n      type: 'EAT_PASTAS',\n      weight,\n      index\n    }\n  }\n \n //2. Le reducer est une fonction pure qui récupère le state précédent et une action, et renvoi le state suivant.\n  const pastaReducer = (state = initialState, action) => {\n    switch(action.type) {\n      case 'EAT_PASTAS':\n        return {\n          ...state,\n          pastas: state.pastas + action.weight\n        }\n        case 'BUY_PASTAS':\n          return {\n            ...state,\n            pastas: state.pastas + action.weight\n          }\n          default:\n            return state;\n          }\n          return state;\n        }   \n        \n// counter is the name of our future reducer function\n        let store = createStore(pastaReducer); \n        store.subscribe(() => console.log(store.getState()));\n\n// Pour effectuer une action, on utilise store.dispatch(theActionOrActionCreator).\n\n        return (\n          <p>C'est la vie !</p>\n        )\n      }\n      \nReactDOM.render(<App />, document.querySelector(\"#root\"));"]},"metadata":{},"sourceType":"module"}