{"ast":null,"code":"var _jsxFileName = \"/Users/julestexier/Google_Drive/PRO/THP_NEXT/Semaine 7 - React avance\\u0301 (suite)/Jour 1 - Redux/Redux - plusieurs reducer/starterReact/src/index.jsx\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  const increment = (value, index) => {\n    //1. Les actions sont des objets simples contenant un type, étant une string, \n    //définissant ce que l'action va faire. \n    return {\n      type: 'INCREMENT',\n      value,\n      index\n    };\n  };\n\n  const decrement = (value, index) => {\n    return {\n      type: 'DECREMENT',\n      value,\n      index\n    };\n  }; //2. Le reducer est une fonction pure qui récupère le state précédent et une action, et renvoi le state suivant.\n\n\n  const counter = (state = 0, action) => {\n    switch (action.type) {\n      case 'INCREMENT':\n        return state + 1;\n\n      case 'DECREMENT':\n        return state - 1;\n\n      default:\n        return state;\n    }\n\n    return state;\n  }; // counter is the name of our future reducer function\n\n\n  let store = createStore(counter);\n  store.subscribe(() => console.log(store.getState())); // Pour effectuer une action, on utilise store.dispatch(theActionOrActionCreator).\n\n  store.dispatch(increment());\n  store.dispatch(increment());\n  store.dispatch(decrement());\n  store.dispatch(increment());\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"C'est la vie !\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 11\n  }, this);\n};\n\n_c = App;\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 52,\n  columnNumber: 17\n}, this), document.querySelector(\"#root\"));\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/julestexier/Google_Drive/PRO/THP_NEXT/Semaine 7 - React avancé (suite)/Jour 1 - Redux/Redux - plusieurs reducer/starterReact/src/index.jsx"],"names":["React","ReactDOM","createStore","App","increment","value","index","type","decrement","counter","state","action","store","subscribe","console","log","getState","dispatch","render","document","querySelector"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,WAAT,QAA4B,OAA5B;;;AAGA,MAAMC,GAAG,GAAG,MAAM;AAChB,QAAMC,SAAS,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAEtC;AACE;AACE,WAAO;AACLC,MAAAA,IAAI,EAAE,WADD;AAELF,MAAAA,KAFK;AAGLC,MAAAA;AAHK,KAAP;AAKD,GATD;;AAUA,QAAME,SAAS,GAAG,CAACH,KAAD,EAAQC,KAAR,KAAkB;AAClC,WAAO;AACLC,MAAAA,IAAI,EAAE,WADD;AAELF,MAAAA,KAFK;AAGLC,MAAAA;AAHK,KAAP;AAKD,GAND,CAXgB,CAmBjB;;;AACC,QAAMG,OAAO,GAAG,CAACC,KAAK,GAAG,CAAT,EAAYC,MAAZ,KAAuB;AACrC,YAAOA,MAAM,CAACJ,IAAd;AACE,WAAK,WAAL;AACE,eAAOG,KAAK,GAAG,CAAf;;AACA,WAAK,WAAL;AACE,eAAOA,KAAK,GAAG,CAAf;;AACA;AACE,eAAOA,KAAP;AANR;;AAQM,WAAOA,KAAP;AACD,GAVP,CApBgB,CAgClB;;;AACQ,MAAIE,KAAK,GAAGV,WAAW,CAACO,OAAD,CAAvB;AACAG,EAAAA,KAAK,CAACC,SAAN,CAAgB,MAAMC,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACI,QAAN,EAAZ,CAAtB,EAlCU,CAoClB;;AACQJ,EAAAA,KAAK,CAACK,QAAN,CAAeb,SAAS,EAAxB;AACAQ,EAAAA,KAAK,CAACK,QAAN,CAAeb,SAAS,EAAxB;AACAQ,EAAAA,KAAK,CAACK,QAAN,CAAeT,SAAS,EAAxB;AACAI,EAAAA,KAAK,CAACK,QAAN,CAAeb,SAAS,EAAxB;AACA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAGD,CA5CP;;KAAMD,G;AA8CNF,QAAQ,CAACiB,MAAT,eAAgB,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,QAAhB,EAAyBC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAzB","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\n\n\nconst App = () => {\n  const increment = (value, index) => {\n  \n//1. Les actions sont des objets simples contenant un type, étant une string, \n  //définissant ce que l'action va faire. \n    return {\n      type: 'INCREMENT',\n      value,\n      index\n    }\n  }\n  const decrement = (value, index) => {\n    return {\n      type: 'DECREMENT',\n      value,\n      index\n    }\n  }\n \n //2. Le reducer est une fonction pure qui récupère le state précédent et une action, et renvoi le state suivant.\n  const counter = (state = 0, action) => {\n    switch(action.type) {\n      case 'INCREMENT':\n        return state + 1;\n        case 'DECREMENT':\n          return state - 1;\n          default:\n            return state;\n          }\n          return state;\n        }   \n        \n// counter is the name of our future reducer function\n        let store = createStore(counter); \n        store.subscribe(() => console.log(store.getState()));\n\n// Pour effectuer une action, on utilise store.dispatch(theActionOrActionCreator).\n        store.dispatch(increment());\n        store.dispatch(increment());\n        store.dispatch(decrement());\n        store.dispatch(increment());\n        return (\n          <p>C'est la vie !</p>\n        )\n      }\n      \nReactDOM.render(<App />, document.querySelector(\"#root\"));"]},"metadata":{},"sourceType":"module"}